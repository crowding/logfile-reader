n
n
n
n
n
n
n
c
n
eye
eye$trial.index
Q
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
populate.data.frame.test()
populate.data.frame.test()
populate.data.frame.test()
simple.array.test()
simple.array.test()
simple.array.test()
simple.array.test()
simple.array.test()
simple.array.test()
simple.array.test()
simple.array.test()
simple.array.test()
simple.array.test()
?within
simple.array.test()
simple.array.test()
?evalq
simple.array.test()
simple.array.test()
simple.array.test()
?as.environment
e <- as.environment(list(a = 1))
eval(a, envir=e)
evalq(a, envir=e)
evalq(a[1], envir=e)
evalq(a[1], envir=e, enclos=baseenv())
parent(e) <- environment()
e <- list2env(list(a = 1))
evalq(a[1], envir=e)
simple.array.test()
simple.array.test()
test <- simple.array.test()
test
test$a
test <- list2env(list(.a = 1, b = 2))
ls(test)
test <- simple.array.test()
system.time(r1 <- f1(5000))
system.time(r1 <- f1(15000))
system.time(r1 <- f1(30000))
test <- simple.array.test()
test <- simple.array.test()
substitute(a$b <- 1, list(b="foo"))
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
Q
loadData("logfile.converted","logfile.RData")
l
n
n
n
n
n
n
n
n
current.length
n
n
n
n
n
n
n
n
n
n
n
n
(n)
n
n
(n)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
c
c
eye$.nrow
eye.index
l$i
n
n
n
n
n
n
n
n
env$.nrow
max(i)
max(index)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
c
c
max(index)
Q
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
cbind(a = list(a = 1, b = 2, c = 3), b = list(a = 1, b = 2, c = 3))
c(a = list(a = 1, b = 2, c = 3), b = list(a = 1, b = 2, c = 3))
test <- data.frame(as.list(runs))
colnames(test)
ls(runs)
Q
loadData("logfile.converted","logfile.RData")
c
run.index
runs$.nrow
c
loadData("logfile.converted","logfile.RData")
Q
loadData("logfile.converted","logfile.RData")
Q
loadData("logfile.converted","logfile.RData")
options(error=)
options(error=default)
options(error=force)
error(1)
stop(1)
loadData("logfile.converted","logfile.RData")
n
n
options(error=debugger)
loadData("logfile.converted","logfile.RData")
length(as.list(runs))
length(as.list(trials))
length(as.list(triggers))
test <- data.frame(as.list(trials))
0
options(error=debugger)
names(trials)
ls(trials)
test <- rbind(as.list(trials))
class(test)
mode(test)
dim(test)
test <- data.frame(test)
colnames(test)
nrow(trials)
nrow(runs)
nrow(triggers)
triggers
loadData("logfile.converted","logfile.RData")
debugger()
1
nrow(runs)
nrow(trials)
runs
loadData("logfile.converted","logfile.RData")
test <- rbind(as.list(runs))
test <- rbind(as.list(trials))
names(test)
class(test)
mode(test)
dim(test)
test <- as.data.frame(test)
nrow(test)
test <- rbind(as.list(trials))
test <- cbind(as.list(trials))
size(test)
test <- do.call(cbind,as.list(trials))
dim(test)
class(test)
mode(test)
test <- do.call(data.frame,as.list(trials))
test <- as.list(trials)
test[[1]]
test[[2]]
names(test)
test <- do.call(as.data.frame,as.list(trials))
?data.frame
Q
?data.frame
loadData("logfile.converted","logfile.RData")
test <- do.call(data.frame, as.list(triggers))
lapply(as.list(triggers), length)
test <- do.call(as.data.frame, as.list(triggers))
nrow(test)
test <- do.call(as.data.frame, as.list(trials))
debugger()
0
help(as.data.frame)
loadData("logfile.converted","logfile.RData")
test <- as.data.frame(trials)
test <- as.data.frame(as.list(trials))
test <- do.call(as.data.frame,as.list(trials))
test <- do.call(data.frame,as.list(trials))
test <- do.call(cbind,as.list(trials))
dim(test)
test <- as.data.frame(test)
colnames(test)
test$i
test <- as.data.frame(do.call(rbind, trials))
test <- as.data.frame(do.call(rbind, as.list(trials)))
dim(test)
colnames(test)
test <- as.data.frame(do.call(cbind, as.list(trials)))
test$i
test <- lapply(as.list(trials, function(x) substitute(I(x))))
test <- lapply(as.list(trials), function(x) substitute(I(x))))
test <- lapply(as.list(trials), function(x) substitute(I(x)))
test <- do.call(as.data.frame(test)
)
test <- do.call(data.frame, test)
test$i
test <- lapply(as.list(trials), function(x) substitute(I(x), list(x=x)))
test$i
test <- do.call(data.frame, test)
dim(test)
test$i
?save
loadData("logfile.converted","logfile.RData")
n
Q
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
?save
loadData("logfile.converted","logfile.RData")
loadData("logfile.converted","logfile.RData")
load("logfile.RData")
nrow(trials)
colnames(trials)
trials$trial.motion.process.phase
?pipe
infile <- "datafiles/cj-2012-02-10__14-31-30-ConcentricDirectionDiscriminabilityCritDistance.log.gz"
?system
?pipe
system(sprintf('file "%s"', infile))
system(sprintf('file -b "%s"', infile))
grepl(infile,".gz$"))
grepl(infile,"\.gz$")
grepl("\.gz$", infile)
grepl("\\.gz$", infile)
readLines(pip,100)
parse(pip, 100)
cloe(pip)
close(pip)
loadData(infile, "outfile.Rdata")
rm(list=ls())
load("outfile.Rdata")
nrow(trials)
trials[1117,]
nrow(triggers)
triggers[20524,]
rm(list=ls())
source(programming.R)
source("programming.R")
run.command("session_graphs.R unpacked/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
13
unique(triggers$name)
colnames(triggers)
run.command("session_graphs.R unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.pdf")
Q
run.command("session_graphs.R unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
13
triggers$trial.i
triggers$trials.i
triggers$next
triggers$`next`
triggers[triggers$name == "ConcentricTrial/run/startMotion",
                              c("trials.i", "next")]
triggers[TRUE,

                              c("trials.i", "next")] 
triggers[TRUE, c("trials.i", "next")]
triggers[, c("trials.i", "next")]
triggers[,"next"]
colnames(triggers)
Q
run.command("unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.pdf")
load(unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData)
load("unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData")
trials[100,'eyeData']
grep('eye', colnames(trials))
colnames(trials)
trials[100,'trial.eyeData']
run.command("session_graphs.R unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
13
grep('logfile', colnames(runs))
?grep
0
run.command("session_graphs.R unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
13
grep('logfile', colnames(runs),value=TRUE)
'beforerun.params' %in% colnames(runs)
runs$subject
grep('subject', colnames(runs),value=TRUE)
runs$source.file
runs$subject
Q
run.command("translator.R datafiles/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.log.gz unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData")
debugger()
0
?library
rm(pipe)
run.command("translator.R datafiles/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.log.gz unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData")
trial
n
n
n
names(trial)
n
names(trial)
trial$test <- foo
trial$test <- "foo"
names(trial)
q
Q
run.command("translator.R datafiles/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.log.gz unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData")
last
n$.nrow
Q
run.command("session_graphs.R unpacked/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/cj-2012-02-08__14-31-45-ConcentricDirectionDiscriminabilityCritDistance.pdf")
run.command("session_graphs.R unpacked/nj-2012-02-09__12-58-45-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/nj-2012-02-09__12-58-45-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
13
grep("version", value=T, colnames(trials))
Q
run.command("session_graphs.R unpacked/nj-2012-02-10__10-59-42-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/nj-2012-02-10__10-59-42-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
q
0
debugger()
7
abs.conditions
trials$abs.response
nrow(trials)
run.command("session_graphs.R unpacked/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
9
trials$abs.response
abs.conditions
9
ddply(trials, union(abs.conditions, c("subject", "spacing")), nrow)
abs.conditions
sapply(union(abs.conditions, c("subject", "spacing")), function(i)mode(trials[,i]))
trials$params.i
abs.conditions
trials$trial.seed
unique(trials$trial.seed)
what.varies(trials)
unique(trials[[,c("trial.version__.function", "trial.seed")]])
unique(trials[[,c("trial.version__.function")]])
class(trials)
trials[[,c("trial.version__.function")]]
trials$trial.version__.function
unique(trials[,c("trial.version__.function", "trial.seed")])
which(trial$seed == list(NA))
which(trials$seed == list(NA))
which(trials$seed == NA)
?identical
0
Q
test <- list(NULL, NULL, NA, 1, NULL)
sapply(list, function(x) identical(x, NA))
sapply(list, function(x) identical(x, NA))
sapply(test, function(x) identical(x, NA))
col <- list(NULL, NULL, NA, 1, NULL)
      col(sapply(col, function(x) identical(x, NA))) <- list(NULL)

      col[sapply(col, function(x) identical(x, NA))] <- list(NULL)

col
run.command("session_graphs.R unpacked/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
0
load("unpacked/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.RData")
nrow(trials)
colnames(trials)
load("unpacked/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.RData")
unique(trials$trial.seed)
unique(trials[4,"trial.version__.function"])
trials[4,"trial.version__.function"]
?unique
run.command("session_graphs.R unpacked/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.pdf")
debugger()
7
sapply(union(abs.conditions, c("subject", "spacing")), function(i)mode(trials[,i]))
7
abs.conditions
pipe(trials, subset(trial.version__.function == "ConcentricTrial"), nrow)
nrow(subset(trials, trials$trial.version__.function == "ConcentricTrial"))
nrow(subset(trials, trial.version__.function == "ConcentricTrial"))
pipe
source("programming.R")
pipe(trials, subset(trial.version__.function == "ConcentricTrial"), nrow)
pipe
unique(subset(trials, trial.version__.function == "ConcentricTrial")$trial.seed)
test <- function(col) {
    ##correct for list-mode columns that started out as numeric
    ##columns. Luckily, MATLAB doesn't have anything equivalent to NA,
    ##so this is safe.
    if (mode(col) == "list") {
      col[sapply(col, function(x) identical(x, NA))] <- list(NULL)
    }
    col
  }
list(NA) %in% unique(trials$trial.seed)
list(NA) %in% unique(test(trials$trial.seed))
debug(oops.NA)
debug(test)
list(NA) %in% unique(test(trials$trial.seed))
n
n
n
col[sapply(col, function(x) identical(x, NA))]
col[sapply(col, function(x) identical(x, list(NA)))]
col[sapply(col, function(x) is.na(x))]
which(sapply(col, function(x) identical(x, NA)))
which(sapply(col, function(x) identical(x, list(NA))))
col[[1]]
col[[2]]
identical(col[[1]], NA)
identical(col[[1]], list(NA))
identical(col[[1]], list(NA), single.NA=T)
identical(col[[1]], NA, single.NA=T)
col[[1]]
identical(col[[1]], NA, single.NA=TRUE)
identical(col[[1]], list(NA), single.NA=TRUE)
col[[1]]
identical(col[[1]], NA)
identical(NA, NA)
identical(col[[1]], NA, single.NA=TRUE)
x <- col[[1]]
identical(x, x, single.NA=TRUE)
identical(x, NA, single.NA=TRUE)
class(x)
class(NA)
identical(numeric(NA), logical(NA), single.NA==TRUE)
identical(as.numeric(NA), as.logical(NA), single.NA==TRUE)
identical(as.numeric(NA), as.logical(NA), single.NA=TRUE)
identical(as.numeric(NA), as.logical(NA), single.NA=TRUE, num.eq=TRUE)
all.equal(as.numeric(NA), as.logical(NA))
all(is.na(x))
all(is.na(NULL))
all.equal(as.numeric(NA), as.logical(NA))
all.equal(as.numeric(NA), as.logical(NA), check.attributes=FALSE)
length(x) == 1 & all(is.na(x))
length(NULL) == 1 & all(is.na(NULL))
length(NULL) == 1 && all(is.na(NULL))
length(list(1)) == 1 && all(is.na(list(1)))
length(list(NA)) == 1 && all(is.na(list(NA)))
x
is.na(col)
which(is.na(col))
col[[356]]
col[[357]]
      col[is.na(col)] <- list(NULL)

col[[1]]
Q
run.command("session_graphs.R unpacked/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.RData session_figures/as-2012-02-10__16-11-12-ConcentricDirectionDiscriminabilityCritDistance.pdf")
quit()
n
